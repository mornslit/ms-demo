buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/central/" }
        jcenter()
    }
    dependencies {
       classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
       classpath 'se.transmode.gradle:gradle-docker:1.2'
//        classpath 'se.transmode.gradle:gradle-docker:1.3-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = 'ms-demo'
    version = '1.0.7'
}

repositories {
    maven { url "http://192.168.40.204:18081/nexus/content/repositories/java/"}
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/central/"}
//    maven { url "http://www.anycloud.top:8081/nexus/content/repositories/java/"}
    jcenter()
}
configurations {
    compile.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    all*.exclude module: 'logback-classic'
    all*.exclude module: 'log4j-over-slf4j'
}
dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR4'
    }
}

dependencies {
    compile 'org.apache.kafka:kafka-clients:0.10.0.1'
//    compile 'org.springframework.kafka:spring-kafka:1.2.3.RELEASE'

    compile 'io.shardingjdbc:sharding-jdbc-spring-boot-starter:2.0.0.M1'
//    compile 'com.zaxxer:HikariCP-java7:2.4.13'
    compile 'com.zaxxer:HikariCP:2.7.1'
    compile 'commons-dbcp:commons-dbcp:1.4'

    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.peilian:ms-comm:1.0.12'
    compile 'org.projectlombok:lombok:1.16.18'

    compile("org.springframework.boot:spring-boot-devtools")

    compile 'mysql:mysql-connector-java:5.1.44'
//    compile 'mysql:mysql-connector-java:5.0.8'
    compile 'com.github.pagehelper:pagehelper-spring-boot-starter:1.2.3'
    compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1'

    compile 'commons-io:commons-io:2.5'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    compile 'org.springframework.cloud:spring-cloud-starter-config'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    compile 'org.springframework.cloud:spring-cloud-starter-feign'
    compile 'org.springframework.cloud:spring-cloud-starter-hystrix'
    compile 'org.springframework.cloud:spring-cloud-starter-hystrix-dashboard'

    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-log4j2'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-web'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.apache.httpcomponents:httpclient'
}

apply plugin: 'docker'
group = 'fabletang'
task beforeDocker (type:Delete ,dependsOn: build){
     delete fileTree('build/docker') {
        include '**/*.jar'
        include 'Dockerfile'
    }
}
task buildDocker(type: Docker, dependsOn: beforeDocker) {
    applicationName = jar.baseName
    version=jar.version
    dockerfile = file('src/main/docker/Dockerfile')
    tag = "${project.group}/${jar.baseName}"
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}
task pushDocker(type: Exec, dependsOn: buildDocker){
    workingDir '.'
}
task runTests {
    doLast {
        exec {
    executable "docker tag ${alltag} ${regUrl}/${alltag}"
        }
}
}
